*nvim-insx* *insx*

Flexible insert-mode key mapping manager.



==============================================================================
CONTENTS                                                         *insx-contents*

INTRO                                                               |insx-intro|
USAGE                                                               |insx-usage|
FUNCTION                                                         |insx-function|
TYPINGS                                                           |insx-typings|
CUSTOM RECIPE                                               |insx-custom-recipe|
BUILT-IN MODULE                                           |insx-built_in-module|



==============================================================================
INTRO                                                               *insx-intro*

This plugin makes it easy to define complex mappings in insert mode.
It also provides general pairwise functionality by default.

The concepts are

- Does not support dot-repeat
- Aims for advanced functionality
- Requires configuration to work


The basic usage is introduced on README.md.
Checkout https://github.com/hrsh7th/nvim-insx



==============================================================================
USAGE                                                               *insx-usage*

The nvim-insx is a general purpose insert-mode key-mapping manager.
However, this provides standard (but advanced!) pairwise features.

The most popular setup is now included as built-in.

>lua
  require('insx.preset.standard').setup()
<

Please read the help if you want to know how to customize more deeper.



==============================================================================
FUNCTION                                                         *insx-function*

## Public API

insx#expand(char): return~
- `char`: string
  - The character for insert-mode mapping (it isn't a form of keycodes).
- `return`: string
  - Expanded keycodes.

require('insx').add(char, recipe)~
- `char`: string
  - The character for insert-mode mapping.
- `recipe`: insx.RecipeSource
  - The action is invoked if enabled returns the true.
  - The `insx.Context` and `insx.ActionContext` is described in |insx-typings|.

require('insx').clear()~
  Clear all managed mappings.
  NOTE: If mapping was hijacked, it wouldn't cleared.

require('insx').expand(char): return~
- `char`: string
  - The character for insert-mode mapping.
- `return`: string?
  - Return the sendable key notation. (this is applied the replace_termcodes).


## Helper API

require('insx').helper.regex.match(str, pattern): return~
- `str`: string
  - The string to match the pattern.
- `pattern`: string
  - The vim regex to match the string.
- `return`: string?
  - Return string if the specified pattern is matched.

require('insx').helper.regex.esc(str): return~
- `str`: string
  - The vim regex string to escape.
- `return`: string
  - Return string if the specified pattern is matched.

require('insx').helper.search.Tag~
- `require('insx').helper.search.Tag.Open`: string
  - The HTML open tag regex
- `require('insx').helper.search.Tag.Close`: string
  - The HTML open tag regex

The enum value that reprecents the regex for HTML Tag elements.

require('insx').helper.search.get_next(pattern): return~
- `pattern`: string
  - The vim regex to matche the next element.
- `return`: { [1]: integer, [2]: integer }
  - Return regex matched position of open element.
  - The position is 0-origin utf8 byte indicies.

require('insx').helper.search.get_pair_open(open, close): return~
- `open`: string
  - The vim regex to matche the open element.
- `close`: string
  - The vim regex to matche the close element.
- `return`: { [1]: integer, [2]: integer }
  - Return regex matched position of open element.
  - The position is 0-origin utf8 byte indicies.

require('insx').helper.search.get_pair_close(open, close): return~
- `open`: string
  - The vim regex to matche the open element.
- `close`: string
  - The vim regex to matche the close element.
- `return`: { [1]: integer, [2]: integer }
  - Return regex matched position of close element.
  - The position is 0-origin utf8 byte indicies.

require('insx').helper.syntax.in_string_or_comment(): return~
- `return`: boolean
  - Return the cursor position is string or comment.

require('insx').helper.syntax.in_string_or_comment_at_cursor(cursor): return~
- `cursor`: { [1]: integer, [2]: integer }
  - The position is 0-origin utf8 byte indicies.
- `return`: boolean
  - Return the specified position is string or comment.

require('insx').helper.indent.get_one_indent(): return~
- `return`: string
  - Return the current buffer's one indent string.

require('insx').helper.indent.get_current_indent(): return~
- `return`: string
  - Return the current line's indent string.

require('insx').helper.indent.make_adjust_keys(param): return~
- `param.current`: string
  - curr indentation string.
- `param.expected`: string
  - next indentation string.
- `return`: string
  - Return the key-sequence to modify the indentation `f` to `t` .

require('insx').helper.position.gt(pos1, pos2): return~
- `pos1`: { [1]: integer, [2]: integer }
  - position to be compared.
- `pos2`: { [1]: integer, [2]: integer }
  - position to be compared.
- `return`: boolean
  - `pos1` < `pos2`

require('insx').helper.position.gte(pos1, pos2): return~
- `pos1`: { [1]: integer, [2]: integer }
  - position to be compared.
- `pos2`: { [1]: integer, [2]: integer }
  - position to be compared.
- `return`: boolean
  - `pos1` <= `pos2`



==============================================================================
TYPINGS                                                           *insx-typings*

 >lua
  ---@class insx.RecipeSource
  ---@field public action fun(ctx: insx.ActionContext): nil 
  ---@field public enabled? fun(ctx: insx.Context): boolean
  ---@field public priority? integer

  ---@class insx.Context
  ---@field public filetype string
  ---@field public char string
  ---@field public row fun(): integer 0-origin index
  ---@field public col fun(): integer 0-origin index
  ---@field public text fun(): string
  ---@field public after fun(): string
  ---@field public before fun(): string

  ---@class insx.ActionContext : insx.Context
  ---@field public send fun(keys: insx.kit.Vim.Keymap.KeysSpecifier): nil send key-sequence like `ctx.send('<CR>')`
  ---@field public move fun(row: integer, col: integer): nil move to specific position like `ctx.move(0, 0)`.
<


==============================================================================
CUSTOM RECIPE                                               *insx-custom-recipe*

The recipe is typed as `insx.RecipeSource`.
I recommend to define as just `function` that returns `insx.RecipeSource` like this.

>lua
  -- The example recipe (it is not useful).
  local function your_recipe(option)
    return {
      ---@param ctx insx.ActionContext
      action = function(ctx)
        local row, col = ctx.row(), ctx.col()
        -- you can feed key-sequence via `ctx.send(...)`
        ctx.send('<CR>') -- The `ctx.send` is look like a `synchronous` function.

        -- If the line after `<CR>` was sent is indented, remove it.
        if ctx.text()match('^%s+') then
          ctx.send('<C-w>')
        end

        ctx.move(row, col)
      end,

      ---@param ctx insx.Context
      enabled = function(ctx)
        return ctx.after() == ''
      end
    }
  end
<



==============================================================================
BUILT-IN MODULE                                           *insx-built_in-module*

The built-in modules provides the pre-defined recipe.

The recipe is
  - It typed as `insx.RecipeSource`
  - It can be registered to `require('insx').add(char, insx.RecipeSource)`


                                                         *insx-recipe-auto_pair*
require('insx.recipe.auto_pair'): fun(option): insx.RecipeSource~
  This recipe provides the basic auto-pairs feature.

  - `option.open`: string
    - The open token of balanced pair like `(` .
  - `option.close`: string
    - The close token of balanced pair like `)` .
  - `option.ignore_pat`: string
    - The pattern to deciding auto-pair should enabled or not.
    - The `ignore_pat = [[\\\%#]]` will be useful for string auto-pair.
      - `|` + `'` = `'|'`
      - `\|` + `'` = `\'|`
>lua
  require('insx').add('(', require('insx.recipe.auto_pair')({
    open = '(',
    close = ')'
  }))
<
  Example: >lua
    `|` + `(` = `(|)`
<

                                                       *insx-recipe-delete_pair*
require('insx.recipe.delete_pair'): fun(option): insx.RecipeSource~
  This recipe provides the basic delete-pairs feature.
  NOTE: This recipe supports deleting the oneline separated pair.

  - `option.open_pat`: string
    - The open token of balanced pair like `(` .
  - `option.close_pat`: string
    - The close token of balanced pair like `)` .
>lua
  local esc = require('insx').helper.regex.esc
  require('insx').add('<BS>', require('insx.recipe.auto_pair')({
    open_pat = esc('('),
    open_pat = esc(')')
  }))
<
  Example: >lua
    `(|)` + `<BS>` = `|`
    `(|foo)` + `<BS>` = `|foo`
<

                                                        *insx-recipe-fast_break*
require('insx.recipe.fast_break'): fun(option): insx.RecipeSource~
  This recipe provides basic pair break feature.

  - `option.open_pat`: string
    - The open token of balanced pair like `(` .
  - `option.close_pat`: string
    - The close token of balanced pair like `)` .
  - `option.split`: boolean
    - Specify enables or not the splitjoin.vim like behavior.
>lua
  local esc = require('insx').helper.regex.esc
  require('insx').add('<CR>', require('insx.recipe.fast_break')({
    open_pat = esc('('),
    open_pat = esc(')')
    split = true,
  }))
<
  Example: >lua
    `(|)` + `<CR>` = `(
      |
    )`
    `(|"string")` + `<CR>` = `(
      |"string"
    )`
    `foo(|bar, baz)` + `<CR>` = `(
      |bar,
      baz
    )`
<

                                                         *insx-recipe-fast_wrap*
require('insx.recipe.fast_wrap'): fun(option): insx.RecipeSource~
  This recipe provides the ability to wrap the next token on the fly.
  NOTE: highly recommend using this recipe along with vim-matchup.

    1. Check the next token is `string`.
    2. Check the next token is matched to the pairwise_pat.
    3. Jump nearest next_pat token.

  - `option.close`: string
    - The close token like `)` .
  - `option.pairwise_pat`: string|string[]
    - The pattern array for deciding to use `%` or not.
  - `option.next_pat`: string|string[]
    - The pattern array for fallback.
>lua
  local esc = require('insx').helper.regex.esc
  require('insx').add('<C-;>', require('insx.recipe.fast_wrap')({
    close = ')'
  }))
<
  Example: >lua
    `(|)foo` + `<C-;>` = `(foo|)`
    `(|)"string"` + `<C-;>` = `("string"|)`
<

                                                         *insx-recipe-jump_next*
require('insx.recipe.jump_next'): fun(option): insx.RecipeSource~
  This recipe provides cursor movement feature for the next pattern.

  - `option.jump_pat`: string|string[]
    - The jump patterns of string or string array.
    - You can use this recipe to achieve `exit pair feature` .
>lua
  local esc = require('insx').helper.regex.esc
  require('insx').add(')', require('insx.recipe.jump_next')({
    jump_pat = {
      [[\%#]] .. esc(')') .. [[\zs]]
    }
  }))
<
  Example: >lua
    `(|)` + `)` = `()|`
<

                                             *insx-recipe-pair_spacing.increase*
require('insx.recipe.pair_spacing').increase: fun(option): insx.RecipeSource~
  This recipe provides the feature that increase&adjust white-space between pairs.

  - `option.open_pat`: string
    - The open token of balanced pair like `(` .
  - `option.close_pat`: string
    - The close token of balanced pair like `)` .
>lua
  local esc = require('insx').helper.regex.esc
  require('insx').add('<Space>', require('insx.recipe.pair_spacing').increase({
    open_pat = esc('('),
    close_pat = esc(')')
  }))
<
  Example: >lua
    `(|)` + ` ` = `( | )`
    `(| )` + ` ` = `( | )`
    `( |)` + ` ` = `(  |  )`
<

                                             *insx-recipe-pair_spacing.decrease*
require('insx.recipe.pair_spacing').decrease: fun(option): insx.RecipeSource~
  This recipe provides the feature that decrease&adjust white-space between pairs.

  - `option.open_pat`: string
    - The open token of balanced pair like `(` .
  - `option.close_pat`: string
    - The close token of balanced pair like `)` .
>lua
  local esc = require('insx').helper.regex.esc
  require('insx').add('<BS>', require('insx.recipe.pair_spacing').decrease({
    open_pat = esc('('),
    close_pat = esc(')')
  }))
<
  Example: >lua
    `( | )` + `<BS>` = `(|)`
    `(  | )` + `<BS>` = `( | )`
    `( |  )` + `<BS>` = `(|)`

==============================================================================
 vim:tw=78:ts=4:et:ft=help:norl:

